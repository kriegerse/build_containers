---
build-squid:
  stage: build
  script:
    - source build_info.sh
    - docker build --network host -f squid/Dockerfile
      --build-arg FS_BASE=squid
      -t $docker_username/squid-stage:$BUILD_PRIMARY_TAG .
    - docker push $docker_username/squid-stage:$BUILD_PRIMARY_TAG
    - docker image ls
    - for i in $BUILD_SECONDARY_TAGS ; do
        docker tag $docker_username/squid-stage:$BUILD_PRIMARY_TAG
        $docker_username/squid-stage:$i ;
        docker push $docker_username/squid-stage:$i ; done
  rules:
    # run on PR when changes on files
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - squid/*
        - squid/**/*
    # run on branches other than master when changes on files
    - if: $CI_COMMIT_BRANCH != 'master'
      changes:
        - squid/*
        - squid/**/*
    # run on schedules or web frontend
    - if: $CI_PIPELINE_SOURCE == 'web'
    # run on schedules for squid
    - if: $schedule_job == 'squid'
    # run on master when changes on files (e.g. after merge)
    - if: $CI_COMMIT_BRANCH == 'master'
      changes:
        - squid/*
        - squid/**/*

test-squid:
  stage: test
  needs:
    - job: build-squid
      artifacts: true
  script:
    - apk add bash curl
    - source build_info.sh
    - bash squid/files/tests/squid_test.sh
  rules:
    # run on PR when changes on files
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - squid/*
        - squid/**/*
    # run on branches other than master when changes on files
    - if: $CI_COMMIT_BRANCH != 'master'
      changes:
        - squid/*
        - squid/**/*
    # run on schedules or web frontend
    - if: $CI_PIPELINE_SOURCE == 'web'
    # run on schedules for squid
    - if: $schedule_job == 'squid'
    # run on master when changes on files (e.g. after merge)
    - if: $CI_COMMIT_BRANCH == 'master'
      changes:
        - squid/*
        - squid/**/*

# publish-squid:
#   stage: publish
#   needs: ["test-squid"]
#   script:
#     - source build_info.sh
#     - docker pull $docker_username/squid-stage:$BUILD_PRIMARY_TAG
#     - docker image ls
#     - for i in $RELEASE_PRIMARY_TAG $RELEASE_SECONDARY_TAGS ; do
#         docker tag $docker_username/squid-stage:$BUILD_PRIMARY_TAG
#         $docker_username/squid:$i ;
#         docker push $docker_username/squid:$i ; done
#   rules:
#     # run on web frontend and if branch master
#     - if: $CI_PIPELINE_SOURCE == 'web' && $CI_COMMIT_BRANCH == 'master'
#     # run on schedules for clamav and if branch master
#     - if: $schedule_job == 'squid' && $CI_COMMIT_BRANCH == 'master'
#     # run on master when changes on files (e.g. after merge)
#     - if: $CI_COMMIT_BRANCH == 'master'
#       changes:
#         - squid/*
#         - squid/**/*
